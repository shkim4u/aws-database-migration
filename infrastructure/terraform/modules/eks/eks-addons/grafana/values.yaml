## Helm values for Grafana.
## References:
## - https://artifacthub.io/packages/helm/grafana/grafana
##

## Service monitor for prometheus.
#serviceMonitor:
#  ## If true, a ServiceMonitor CRD is created for a prometheus operator
#  ## https://github.com/coreos/prometheus-operator
#  enabled: true

## Ingress.
ingress:
  enabled: true
  annotations:
    # Ingress core settings.
    "kubernetes.io/ingress.class": "alb"
    "alb.ingress.kubernetes.io/scheme": "internet-facing"
    "alb.ingress.kubernetes.io/target-type": "ip"
    "alb.ingress.kubernetes.io/target-group-attributes": "stickiness.enabled=true,stickiness.lb_cookie.duration_seconds=60"
    # Ingress group settings.
    "alb.ingress.kubernetes.io/group.name": "grafana"
    "alb.ingress.kubernetes.io/group.order": "1"
    # Needed when using TLS.
#    "alb.ingress.kubernetes.io/backend-protocol": "HTTPS"
#    "alb.ingress.kubernetes.io/healthcheck-protocol": "HTTPS"
    # Refer to: https://kubernetes-sigs.github.io/aws-load-balancer-controller/v2.1/guide/ingress/annotations/
    "alb.ingress.kubernetes.io/success-codes": "200,404,301,302"
    "alb.ingress.kubernetes.io/listen-ports": '[{"HTTP": 80}, {"HTTPS": 443}]'
    "alb.ingress.kubernetes.io/actions.ssl-redirect": '{"Type": "redirect", "RedirectConfig": { "Protocol": "HTTPS", "Port": "443", "StatusCode": "HTTP_301"}}'
    "alb.ingress.kubernetes.io/certificate-arn": ${certificate_arn}
  hosts: []
#  extraPaths:
#    - path: /
#      pathType: Prefix
#      backend:
#        service:
#          name: ssl-redirect
#          port:
#            name: use-annotation
#    - path: /
#      pathType: Prefix
#      backend:
#        service:
#          name: grafana
#          port:
#            number: 80
##        serviceName: grafana
##        servicePort: 80
##        serivce:
##          name: grafana
##          port:
##            number: 3000

## Enable persistence using Persistent Volume Claims
## ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
##
persistence:
  enabled: true

## Password can be retrieved with the following command.
#  kubectl get secret --namespace grafana grafana -o jsonpath="{.data.admin-password}" | base64 --decode ; echo

## Configure grafana datasources
## ref: http://docs.grafana.org/administration/provisioning/#datasources
## ref: Kubernetes API Server Dashboard - https://grafana.com/grafana/dashboards/12006
##
datasources:
  datasources.yaml:
    apiVersion: 1
    datasources:
    - name: Prometheus
      type: prometheus
      url: http://prometheus-server.istio-system
      access: proxy
      isDefault: true

# Use an existing secret for the admin user.
admin:
  existingSecret: "${admin_existing_secret}"
  userKey: ${admin_user_key}
  passwordKey: ${admin_password_key}
